name: Generate Weather Haiku

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 9 * * *'  # Daily at 9 AM UTC

permissions:
  contents: write  # Need write permission to push screenshots
  issues: write

jobs:
  generate-haiku:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code SDK and Playwright
        run: |
          npm install -g @anthropic-ai/claude-code
          npx playwright install chromium
          npx playwright install-deps chromium

      - name: Generate Weather Haiku with Visualization
        env:
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          WITH_VISUALIZATION: "true"
          MCP_CONFIG: "playwright-mcp-config.json"
        run: |
          # Make the script executable and run it
          chmod +x agent.sh
          ./agent.sh

      - name: Read Generated Haiku
        id: haiku
        run: |
          if [ -f result.md ]; then
            HAIKU_CONTENT=$(cat result.md)
            echo "haiku_exists=true" >> $GITHUB_OUTPUT
          else
            HAIKU_CONTENT="Failed to generate haiku"
            echo "haiku_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit Screenshot to Repository
        if: steps.haiku.outputs.haiku_exists == 'true' && hashFiles('weather-visualization.png') != ''
        id: screenshot
        run: |
          DATE=$(date +%Y-%m-%d)
          TIMESTAMP=$(date +%H-%M-%S)
          FILENAME="screenshots/${DATE}-${TIMESTAMP}.png"
          
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create or checkout the weather-screenshots branch
          git fetch origin weather-screenshots:weather-screenshots 2>/dev/null || git checkout -b weather-screenshots
          git checkout weather-screenshots || git checkout -b weather-screenshots
          
          # Create screenshots directory if it doesn't exist
          mkdir -p screenshots
          
          # Copy the screenshot with date-based name
          cp weather-visualization.png "$FILENAME"
          
          # Commit and push
          git add "$FILENAME"
          git commit -m "Add weather visualization for ${DATE} at ${TIMESTAMP}"
          git push origin weather-screenshots || git push --set-upstream origin weather-screenshots
          
          # Save the filename for the issue
          echo "screenshot_url=https://raw.githubusercontent.com/${{ github.repository }}/weather-screenshots/${FILENAME}" >> $GITHUB_OUTPUT
          echo "screenshot_path=${FILENAME}" >> $GITHUB_OUTPUT
      
      - name: Upload Visualization as Artifact (backup)
        if: steps.haiku.outputs.haiku_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: weather-visualization
          path: weather-visualization.png
          retention-days: 30
      
      - name: Add to Workflow Summary
        run: |
          echo "## üå¶Ô∏è Today's Weather Haiku" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat result.md >> $GITHUB_STEP_SUMMARY || echo "No haiku generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f weather-visualization.png ]; then
            echo "### üìä Weather Visualization" >> $GITHUB_STEP_SUMMARY
            echo "Screenshot saved as artifact (view in Actions tab)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create GitHub Issue with Haiku
        if: steps.haiku.outputs.haiku_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const haikuContent = fs.readFileSync('result.md', 'utf8');
            const date = new Date().toISOString().split('T')[0];
            const time = new Date().toTimeString().split(' ')[0];
            const title = `üå¶Ô∏è Daily Weather Haiku - ${date} at ${time}`;
            
            let visualizationSection = '';
            const screenshotUrl = '${{ steps.screenshot.outputs.screenshot_url }}';
            if (screenshotUrl && fs.existsSync('weather-visualization.png')) {
              visualizationSection = `
            
            ## üìä Weather Visualization
            
            ![Weather Visualization](${screenshotUrl})
            
            *Weather conditions and forecast for London*`;
            }
            
            const body = `${haikuContent}${visualizationSection}
            
            ---
            *Generated by Claude Code SDK with Playwright MCP at ${new Date().toUTCString()}*
            
            [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            // Close any open daily-haiku issues first
            const openIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'daily-haiku',
              per_page: 100
            });
            
            for (const issue of openIssues.data) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              console.log(`Closed previous issue #${issue.number}`);
            }
            
            // Always create a new issue
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['daily-haiku']
            });
            console.log(`Created new issue #${newIssue.data.number}`);